server:
  # 端口
  port: 5520

#数据源配置
spring:
  application:
    name: collector
  datasource:
    url: jdbc:mysql://192.168.6.128:3306/collector?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&serverTimezone=GMT%2B8
    username: root
    password: root
    driver-class-name: com.mysql.cj.jdbc.Driver
    # 连接池建立时创建的初始化连接数
    initialSize: 3
    # 连接池中最小的活跃连接数
    minIdle: 5
    # 连接池中最大的活跃连接数
    maxActive: 20
    # 获取连接等待超时的时间
    maxWait: 30000
    # 间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
    # 一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 300000
    maxEvictableIdleTimeMillis: 900000
    validationQuery: SELECT 1 FROM DUAL
    # 是否在连接空闲一段时间后检测其可用性
    testWhileIdle: true
    # 是否在获得连接后检测其可用性
    testOnBorrow: false
    # 是否在连接放回连接池后检测其可用性
    testOnReturn: false
    # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: true
    maxPoolPreparedStatementPerConnectionSize: 20
    # 监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    filters: stat,log4j
    # 合并多个DruidDataSource的监控数据
    useGlobalDataSourceStat: true
    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
  redis:
    # Redis数据库索引（默认为0）
    database: 0
    host: 192.168.6.128
    port: 6379
#    password:
    # 数据库连接超时时间，2.0 中该参数的类型为Duration，这里在配置的时候需要指明单位
    timeout: 10s
    # 连接池配置，2.0中直接使用jedis或者lettuce配置连接池
    jedis:
      pool:
        # 最大空闲连接数
        max-idle: 50
        # 最小空闲连接数
        min-idle: 5
        # 等待可用连接的最大时间，负数为不限制
        max-wait: -1s
        # 最大活跃连接数，负数为不限制
        max-active: -1

mybatis-plus:
  configuration:
    # 配置MyBatis使用控制台输出日志
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  mapper-url: com.collector.mapper
  # 扫描MyBatis Mapper 所对应的 XML 文件位置
  mapper-locations: classpath:mapper/*Mapper.xml
  # MyBaits 别名包扫描路径
  type-aliases-package: com.collector.bean.entity